@page "/"
@using StremingDemo.Models
@rendermode InteractiveServer
@inject NavigationManager Navigation

@if (videos is not null && string.IsNullOrEmpty(currentVideo))
{
    <div class="row d-flex justify-content-center">
        @foreach (var video in videos)
        {
            <div class="col-lg-2 col-md-4 col-sm-12 p-2">
                <Card Class="mb-4 w-100">
                    <img class="rounded-top img-fluid" src="@($"/api/videos/{video.Code}.jpg")" alt="placeholder" />
                    <CardBody class="text-center">
                        <CardTitle>@video.Code</CardTitle>
                        <Icon Name="IconName.PlayCircleFill" Size="IconSize.x3" Color="IconColor.Dark" @onclick="() => PlayVideo(video.Code)" class="clickable-icon" />
                    </CardBody>
                </Card>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(currentVideo))
{
    <video controls Class="w-100">
        <source src="@($"/api/videos/{currentVideo}.mp4")" type="video/mp4">
        <track src="@($"/api/videos/{currentVideo}.vtt")" kind="subtitles" srclang="es" label="Spanish">
        Your browser does not support the video tag.
    </video>
}


@code {


    public string currentVideo = string.Empty;

    public void PlayVideo(string url)
    {
        currentVideo = url;
        videos = null;
        InvokeAsync(StateHasChanged);
    }

    public List<Video> videos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ignore SSL certificate validation
        var handler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
            };

        // Create HttpClient with custom handler
        var httpClient = new HttpClient(handler)
            {
                BaseAddress = new Uri(Navigation.BaseUri)
            };

        videos = await httpClient.GetFromJsonAsync<List<Video>>("api/videos/list");


    }

}
