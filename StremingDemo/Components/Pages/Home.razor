@page "/"
@using StremingDemo.Models
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject NavigationManager Navigation

<div class="netflix-container">
    @if (videosByGroup?.Any() == true)
    {
        @foreach (var group in videosByGroup)
        {
            <h2 class="section-title">@group.Key</h2>
            <div class="video-row">
                @foreach (var video in group.Value)
                {
                    var uri = "Watch/" + video.Code;
                    <div class="video-card" @onclick="() => Navigation.NavigateTo(uri)">
                        <img src="@($"/api/videos/{video.Code}.jpg")" alt="@video.Code" class="video-thumbnail" />
                        <div class="video-overlay">
                            <span class="video-title">@video.Code</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    public List<Video> videos { get; set; }
    public Dictionary<string, List<Video>> videosByGroup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var handler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
            };

        var httpClient = new HttpClient(handler)
            {
                BaseAddress = new Uri(Navigation.BaseUri)
            };

        videos = await httpClient.GetFromJsonAsync<List<Video>>("api/videos/list");

        // Agrupar por prefijo (por ejemplo, antes del primer guión bajo o número)
        videosByGroup = videos
            .GroupBy(v => GetGroupKey(v.Code))
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private string GetGroupKey(string code)
    {
        // Busca patrón como "The White Lotus S01 E03" → "The White Lotus S01"
        var match = Regex.Match(code, @"^(.*?S\d{2})", RegexOptions.IgnoreCase);
        if (match.Success)
        {
            return match.Groups[1].Value.Trim();
        }

        // Si no encuentra temporada, intenta cortar al final de la primera palabra completa
        return code.Split(" ").FirstOrDefault() ?? code;
    }
}
