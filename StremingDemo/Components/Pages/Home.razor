@page "/"
@using StremingDemo.Models
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject NavigationManager Navigation

<div class="netflix-container">
    @if (seriesByGroup?.Any() == true)
    {
        @foreach (var group in seriesByGroup)
        {
            <h2 class="section-title">@group.Key</h2>
            <div class="video-row">
                @foreach (var video in group.Value)
                {
                    var uri = "Watch/" + video.Code;
                    <div class="video-card" @onclick="() => Navigation.NavigateTo(uri)">
                        <img src="@($"/api/videos/{video.Code}.jpg")" alt="@video.Code" class="video-thumbnail" />
                        <div class="video-overlay">
                            <span class="video-title">@video.Code</span>
                        </div>
                    </div>
                }
            </div>
        }
    }

    @if (movies?.Any() == true)
    {
        <h2 class="section-title">Top Picks for You</h2>
        <div class="video-row">
            @foreach (var movie in movies)
            {
                var uri = "Watch/" + movie.Code;
                <div class="video-card" @onclick="() => Navigation.NavigateTo(uri)">
                    <img src="@($"/api/videos/{movie.Code}.jpg")" alt="@movie.Code" class="video-thumbnail" />
                    <div class="video-overlay">
                        <span class="video-title">@movie.Code</span>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    public List<Video> videos { get; set; }
    public Dictionary<string, List<Video>> seriesByGroup { get; set; } = new();
    public List<Video> movies { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var handler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
            };

        var httpClient = new HttpClient(handler)
            {
                BaseAddress = new Uri(Navigation.BaseUri)
            };

        videos = await httpClient.GetFromJsonAsync<List<Video>>("api/videos/list");

        foreach (var video in videos)
        {
            var groupKey = GetSeriesGroupKey(video.Code);
            if (string.IsNullOrEmpty(groupKey))
            {
                movies.Add(video);
            }
            else
            {
                if (!seriesByGroup.ContainsKey(groupKey))
                {
                    seriesByGroup[groupKey] = new List<Video>();
                }
                seriesByGroup[groupKey].Add(video);
            }
        }
    }

    private string GetSeriesGroupKey(string code)
    {
        // Detecta "S01 E03" o similar y devuelve "The White Lotus S01"
        var match = 
        Regex.Match(code, @"^(.*?\bS\d{2})\b", RegexOptions.IgnoreCase);
        if (match.Success)
        {
            return match.Groups[1].Value.Trim();
        }

        // Si no es una serie, retornar null para considerarlo película
        return null;
    }
}
